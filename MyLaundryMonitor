/**
 *  Alert on Power Consumption
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License. You may obtain a copy of the License at:
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed
 *  on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License
 *  for the specific language governing permissions and limitations under the License.
 *
 */

import groovy.time.*

definition(
  name: "Best Laundry Monitor",
  namespace: "tweason",
  author: "Tray Eason",
  description: "Using a device with powerMonitor capability, monitor the laundry cycle and alert when it's done.",
  category: "Green Living",
  iconUrl: "https://s3.amazonaws.com/smartthings-device-icons/Appliances/appliances8-icn.png",
  iconX2Url: "https://s3.amazonaws.com/smartthings-device-icons/Appliances/appliances8-icn@2x.png")


preferences {
  section ("When this device stops drawing power") {
    input "meter", "capability.powerMeter", multiple: false, required: true
    input "cycle_start_power_threshold", "number", title: "Start cycle when power consumption goes above (W)", required: true
    input "cycle_end_power_threshold", "number", title: "Stop cycle when power consumption drops below (W) ...", required: true
    input "cycle_end_wait", "number", title: "... for at least this long (min)", required: true
  }

  section ("Send this message") {
    input "message", "text", title: "Notification message", description: "Laudry is done!", required: False
  }
  
  section ("Notification method") {
    input "sendPushMessage", "bool", title: "Send a device notification?"
    input "notificationDevices", "capability.notification", title: "Notification device", required: false, multiple: true
    input "speechOut", "capability.speechSynthesis", title:"Speak Via: (Speech Synthesis)",multiple: true, required: false
    input "player", "capability.musicPlayer", title:"Speak Via: (Music Player -> TTS)",multiple: true, required: false
  }

  section ("Switches") {
     input "switchesStart", "capability.switch", title: "Turn off this switch at start", required:false, multiple:true
     input "switches", "capability.switch", title: "Turn on this switch", required:false, multiple:true
  }
}

def installed() {
  log.debug "Installed with settings: ${settings}"
  init()
}

def updated() {
  log.debug "Updated with settings: ${settings}"
  unsubscribe()
  init()
}

def init() {
  subscribe(meter, "power", handler)
}

def handler(evt) {
    def latestPower = meter.currentValue("power")
    log.trace "Power: ${latestPower}W"

    if (!state.cycleOn && latestPower > cycle_start_power_threshold) {
        cycleOn(evt)
    }
    // If power drops below threshold, wait for a few minutes.
    else if (state.cycleOn && latestPower <= cycle_end_power_threshold) {
        runIn(cycle_end_wait * 60, "cycleOff")
    }
}

private cycleOn(evt) {
    state.cycleOn = true
    if (switchesStart) {
          switchesStart*.off()
        }
    log.trace "Cycle started. Cycle state: On"
}

private cycleOff(evt) {
    def latestPower = meter.currentValue("power")
    log.trace "Power: ${latestPower}W"

    // If power is still below threshold, end cycle.
    if (state.cycleOn && latestPower <= cycle_end_power_threshold) {
        state.cycleOn = false
        if (switches) {
          switches*.off()
        }
        log.trace "Cycle ended."

        if(speechOut){
            speakMessage(message)}
        
        if(player){
            musicPlayerTTS(message)
        } 
        
        if (switches) {
          switches*.on()
        } 
        
        if (sendPushMessage) {
            send(message)
        }    
  
    }
}


private send(msg) {
    notificationDevices.each{ device -> 
    device.deviceNotification(msg)
}

  log.debug msg
}

private speakMessage(msg) {
     speechOut.speak(msg)
}

private musicPlayerTTS(msg) {
	player.playText(msg)
}
